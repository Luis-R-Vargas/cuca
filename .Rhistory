lm(porc_pocupada ~ asignacion, data = datos_mun),
lm(porc_vph_c_serv ~ asignacion, data = datos_mun),
lm(porc_vph_inter ~ asignacion, data = datos_mun)
)
stargazer(modelos, type = "text", title = "Resultados de las regresiones bivariadas",
model.names = FALSE, column.labels = c("porc_pobfem", "porc_p_18a24", "porc_p_18a24_m", "porc_p_18a24_f", "porc_pnacoe", "porc_p18ym_pb", "porc_pea", "porc_pocupada", "porc_vph_c_serv", "porc_vph_inter"),
omit.stat = "f", single.row = TRUE)
library(broom)
library(dplyr)
library(tidyr)
######## Verificar las salidas de las regresiones #############
for (i in 1:length(modelos)) {
cat("\nModelo", i, ":", model_names[i], "\n")
print(summary(modelos[[i]]))
}
modelos <- list(
lm(porc_pobfem ~ asignacion, data = datos_mun),
lm(porc_p_18a24 ~ asignacion, data = datos_mun),
lm(porc_p_18a24_m ~ asignacion, data = datos_mun),
lm(porc_p_18a24_f ~ asignacion, data = datos_mun),
lm(porc_pnacoe ~ asignacion, data = datos_mun),
lm(porc_p18ym_pb ~ asignacion, data = datos_mun),
lm(porc_pea ~ asignacion, data = datos_mun),
lm(porc_pocupada ~ asignacion, data = datos_mun),
lm(porc_vph_c_serv ~ asignacion, data = datos_mun),
lm(porc_vph_inter ~ asignacion, data = datos_mun)
)
View(modelos)
stargazer(modelos, type = "text", title = "Resultados de las regresiones bivariadas",
model.names = FALSE, column.labels = c("porc_pobfem", "porc_p_18a24", "porc_p_18a24_m", "porc_p_18a24_f", "porc_pnacoe", "porc_p18ym_pb", "porc_pea", "porc_pocupada", "porc_vph_c_serv", "porc_vph_inter"),
omit.stat = "f", single.row = TRUE)
print(summary(modelos[[i]]))
extract_results <- function(model, variable_name) {
coefs <- summary(model)$coefficients
tibble(
variable = variable_name,
term = rownames(coefs),
estimate = coefs[, "Estimate"],
std.error = coefs[, "Std. Error"],
statistic = coefs[, "t value"],
p.value = coefs[, "Pr(>|t|)"]
)
}
resultados_modelos <- bind_rows(lapply(1:length(modelos), function(i) extract_results(modelos[[i]], model_names[i])))
# Extraer resultados de cada modelo y combinarlos en una tabla
resultados_modelos <- bind_rows(lapply(1:length(modelos), function(i) extract_results(modelos[[i]], model_names[i])))
# Extraer resultados de cada modelo y combinarlos en una tabla
resultados_modelos <- bind_rows(lapply(1:length(modelos), function(i) extract_results(modelos[[i]], model_names[i])))
update.packages("rlang")
update.packages(rlang)
update.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("ggplot2")
library(ggplot2)
ggplot(datos_mun, aes(x = asignacion, y = porc_p_18a24_f)) +
geom_boxplot() +
labs(title = "Distribución de porc_p_18a24_f", x = "Asignación", y = "Porcentaje")
ggplot(datos_mun, aes(x = asignacion, y = porc_pnacoe)) +
geom_boxplot() +
labs(title = "Distribución de porc_pnacoe", x = "Asignación", y = "Porcentaje")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("stargazer")
library(stargazer)
modelos <- list(
lm(porc_pobfem ~ asignacion, data = datos_mun),
lm(porc_p_18a24 ~ asignacion, data = datos_mun),
lm(porc_p_18a24_m ~ asignacion, data = datos_mun),
lm(porc_p_18a24_f ~ asignacion, data = datos_mun),
lm(porc_pnacoe ~ asignacion, data = datos_mun),
lm(porc_p18ym_pb ~ asignacion, data = datos_mun),
lm(porc_pea ~ asignacion, data = datos_mun),
lm(porc_pocupada ~ asignacion, data = datos_mun),
lm(porc_vph_c_serv ~ asignacion, data = datos_mun),
lm(porc_vph_inter ~ asignacion, data = datos_mun)
)
stargazer(modelos, type = "text", title = "Resultados de las regresiones bivariadas",
model.names = FALSE, column.labels = c("porc_pobfem", "porc_p_18a24", "porc_p_18a24_m", "porc_p_18a24_f", "porc_pnacoe", "porc_p18ym_pb", "porc_pea", "porc_pocupada", "porc_vph_c_serv", "porc_vph_inter"),
omit.stat = "f", single.row = TRUE)
for (i in 1:length(modelos)) {
cat("\nModelo", i, ":", model_names[i], "\n")
print(summary(modelos[[i]]))
}
View(modelos)
modelos <- list(
lm(porc_pobfem ~ asignacion, data = datos_mun),
lm(porc_p_18a24 ~ asignacion, data = datos_mun),
lm(porc_p_18a24_m ~ asignacion, data = datos_mun),
lm(porc_p_18a24_f ~ asignacion, data = datos_mun),
lm(porc_pnacoe ~ asignacion, data = datos_mun),
lm(porc_p18ym_pb ~ asignacion, data = datos_mun),
lm(porc_pea ~ asignacion, data = datos_mun),
lm(porc_pocupada ~ asignacion, data = datos_mun),
lm(porc_vph_c_serv ~ asignacion, data = datos_mun),
lm(porc_vph_inter ~ asignacion, data = datos_mun)
)
for (i in 1:length(modelos)) {
cat("\nModelo", i, ":", model_names[i], "\n")
print(summary(modelos[[i]]))
}
extract_results <- function(model, variable_name) {
coefs <- summary(model)$coefficients
tibble(
variable = variable_name,
term = rownames(coefs),
estimate = coefs[, "Estimate"],
std.error = coefs[, "Std. Error"],
statistic = coefs[, "t value"],
p.value = coefs[, "Pr(>|t|)"]
)
}
# Extraer resultados de cada modelo y combinarlos en una tabla
resultados_modelos <- bind_rows(lapply(1:length(modelos), function(i) extract_results(modelos[[i]], model_names[i])))
library(broom)
library(dplyr)
library(tidyr)
######## Verificar las salidas de las regresiones #############
for (i in 1:length(modelos)) {
cat("\nModelo", i, ":", model_names[i], "\n")
print(summary(modelos[[i]]))
}
View(modelos)
library(broom)
extract_results <- function(model, variable_name) {
coefs <- summary(model)$coefficients
tibble(
variable = variable_name,
term = rownames(coefs),
estimate = coefs[, "Estimate"],
std.error = coefs[, "Std. Error"],
statistic = coefs[, "t value"],
p.value = coefs[, "Pr(>|t|)"]
)
}
# Extraer resultados de cada modelo y combinarlos en una tabla
resultados_modelos <- bind_rows(lapply(1:length(modelos), function(i) extract_results(modelos[[i]], model_names[i])))
View(datos_mun)
cat("Estadísticas descriptivas de las variables porc_")
select(datos_mun, starts_with("porc_")) %>%
summarise_all(
list(
media = mean,
desviacion_estandar = sd,
minimo = min,
maximo = max
)
)
set.seed(12345)
#Crear un vector de asignaciones con 53 tratamientos y 53 controles
asignaciones <- c(rep("tratamiento", 53), rep("control", 53))
asignaciones_aleatorias <-  sample(asignaciones, length(asignaciones))
cat?
?cat
datos_mun$asignacion <- asignaciones_aleatorias
table(datos_mun$asignacion)
# Pruebas t para verificar el balance:
ttest_pobfem <- t.test(porc_pobfem ~ asignacion, data = datos_mun)
ttest_p_18a24 <- t.test(porc_p_18a24 ~ asignacion, data = datos_mun)
ttest_vph_inter <- t.test(porc_vph_inter ~ asignacion, data = datos_mun)
ttest_pobfem
ttest_p_18a24
ttest_vph_inter
# Creación de la tabla resumen
tabla_ttest <- data.frame(
variable = c("porc_pobfem", "porc_p_18a24", "porc_vph_inter"),
media_tratamiento = c(ttest_pobfem$estimate[1], ttest_p_18a24$estimate[1], ttest_vph_inter$estimate[1]),
media_control = c(ttest_pobfem$estimate[2], ttest_p_18a24$estimate[2], ttest_vph_inter$estimate[2]),
diff_medias = c(ttest_pobfem$estimate[1] - ttest_pobfem$estimate[2],
ttest_p_18a24$estimate[1] - ttest_p_18a24$estimate[2],
ttest_vph_inter$estimate[1] - ttest_vph_inter$estimate[2]),
estadistica_t = c(ttest_pobfem$statistic, ttest_p_18a24$statistic, ttest_vph_inter$statistic),
p_value = c(ttest_pobfem$p.value, ttest_p_18a24$p.value, ttest_vph_inter$p.value),
rechazo_hipotesis = c(ttest_pobfem$p.value < 0.05, ttest_p_18a24$p.value < 0.05, ttest_vph_inter$p.value < 0.05)
)
tabla_ttest
# Pruebas de balance usando regresiones bivariadas
reg_pobfem <- lm(porc_pobfem ~ asignacion, data = datos_mun)
reg_p_18a24 <- lm(porc_p_18a24 ~ asignacion, data = datos_mun)
reg_vph_inter <- lm(porc_vph_inter ~ asignacion, data = datos_mun)
summary(reg_pobfem)
summary(reg_p_18a24)
summary(reg_vph_inter)
ggplot(datos_mun, aes(x = asignacion, y = porc_p_18a24_f)) +
geom_boxplot() +
labs(title = "Distribución de porc_p_18a24_f", x = "Asignación", y = "Porcentaje")
library(ggplot2)
ggplot(datos_mun, aes(x = asignacion, y = porc_p_18a24_f)) +
geom_boxplot() +
labs(title = "Distribución de porc_p_18a24_f", x = "Asignación", y = "Porcentaje")
ggplot(datos_mun, aes(x = asignacion, y = porc_pnacoe)) +
geom_boxplot() +
labs(title = "Distribución de porc_pnacoe", x = "Asignación", y = "Porcentaje")
modelos <- list(
lm(porc_pobfem ~ asignacion, data = datos_mun),
lm(porc_p_18a24 ~ asignacion, data = datos_mun),
lm(porc_p_18a24_m ~ asignacion, data = datos_mun),
lm(porc_p_18a24_f ~ asignacion, data = datos_mun),
lm(porc_pnacoe ~ asignacion, data = datos_mun),
lm(porc_p18ym_pb ~ asignacion, data = datos_mun),
lm(porc_pea ~ asignacion, data = datos_mun),
lm(porc_pocupada ~ asignacion, data = datos_mun),
lm(porc_vph_c_serv ~ asignacion, data = datos_mun),
lm(porc_vph_inter ~ asignacion, data = datos_mun)
)
View(modelos)
stargazer(modelos, type = "text", title = "Resultados de las regresiones bivariadas",
model.names = FALSE, column.labels = c("porc_pobfem", "porc_p_18a24", "porc_p_18a24_m", "porc_p_18a24_f", "porc_pnacoe", "porc_p18ym_pb", "porc_pea", "porc_pocupada", "porc_vph_c_serv", "porc_vph_inter"),
omit.stat = "f", single.row = TRUE)
summary(modelos)
modelos
for (i in 1:length(modelos)) {
cat("\nModelo", i, ":", model_names[i], "\n")
print(summary(modelos[[i]]))
}
View(modelos)
tibble(
variable = variable_name,
term = rownames(coefs),
estimate = coefs[, "Estimate"],
std.error = coefs[, "Std. Error"],
statistic = coefs[, "t value"],
p.value = coefs[, "Pr(>|t|)"]
)
# Ordenar alfabéticamente
datos_mun <- datos_mun %>%
arrange(nom_mun)
cat("Primeros cinco municipios:")
head(datos_mun, 5)
cat("Últimos cinco municipios:")
tail(datos_mun, 5)
# Ordenar alfabéticamente
datos_mun <- datos_mun %>%
arrange(nom_mun)
cat("Primeros cinco municipios:")
head(datos_mun, 5)
cat("Últimos cinco municipios:")
tail(datos_mun, 5)
install.packages("lmtest")
install.packages("sandwich")
install.packages("stargazer")
install.packages("patchwork")
library(haven)
library(tidyverse)
library(tidyverse)
library(dplyr)
library(lmtest)
library(sandwich)
library(ggplot2)
library(stargazer)
library(broom)
library(tidyr)
library(kableExtra)
library(patchwork)
View(datos_mun)
View(datos_mun)
datos_mun <- base %>%
group_by(mun, nom_mun) %>%
summarise(
pobtot = sum(pobtot),
pobfem = sum(pobfem),
p_18a24 = sum(p_18a24),
p_18a24_m = sum(p_18a24_m),
p_18a24_f = sum(p_18a24_f),
pnacoe = sum(pnacoe),
p18ym_pb = sum(p18ym_pb),
pea = sum(pea),
pocupada = sum(pocupada),
tvivhab = sum(tvivhab),
vph_c_serv = sum(vph_c_serv),
vph_inter = sum(vph_inter)
)
datos_mun <- datos_mun %>%
arrange(nom_mun)
cat("Primeros cinco municipios:")
head(datos_mun, 5)
cat("Últimos cinco municipios:")
tail(datos_mun, 5)
datos_mun <- datos_mun %>%
mutate(
porc_pobfem = pobfem / pobtot * 100,
porc_p_18a24 = p_18a24 / pobtot * 100,
porc_p_18a24_m = p_18a24_m / pobtot * 100,
porc_p_18a24_f = p_18a24_f / pobtot * 100,
porc_pnacoe = pnacoe / pobtot * 100,
porc_p18ym_pb = p18ym_pb / pobtot * 100,
porc_pea = pea / pobtot * 100,
porc_pocupada = pocupada / pobtot * 100,
porc_vph_c_serv = vph_c_serv / tvivhab * 100,
porc_vph_inter = vph_inter / tvivhab * 100
)
Stats <- datos_mun %>%
select(starts_with("porc_")) %>%
ungroup() %>%
summarise_all(
list(
media = mean,
desviacion_estandar = sd,
minimo = min,
maximo = max
)
) %>%
select(-contains("mun_")) %>%
pivot_longer(cols = 1:40,
names_to = "Variable",
values_to = "Valor")
datos_mun <- datos_mun %>%
mutate(
porc_pobfem = pobfem / pobtot * 100,
porc_p_18a24 = p_18a24 / pobtot * 100,
porc_p_18a24_m = p_18a24_m / pobtot * 100,
porc_p_18a24_f = p_18a24_f / pobtot * 100,
porc_pnacoe = pnacoe / pobtot * 100,
porc_p18ym_pb = p18ym_pb / pobtot * 100,
porc_pea = pea / pobtot * 100,
porc_pocupada = pocupada / pobtot * 100,
porc_vph_c_serv = vph_c_serv / tvivhab * 100,
porc_vph_inter = vph_inter / tvivhab * 100
)
View(datos_mun)
Stats <- datos_mun %>%
select(starts_with("porc_")) %>%
ungroup() %>%
summarise_all(
list(
media = mean,
desviacion_estandar = sd,
minimo = min,
maximo = max
)
) %>%
select(-contains("mun_")) %>%
pivot_longer(cols = 1:40,
names_to = "Variable",
values_to = "Valor")
library(haven)
library(tidyverse)
library(dplyr)
library(lmtest)
library(sandwich)
library(ggplot2)
library(stargazer)
library(broom)
library(tidyr)
library(kableExtra)
library(patchwork)
Stats <- datos_mun %>%
select(starts_with("porc_")) %>%
ungroup() %>%
summarise_all(
list(
media = mean,
desviacion_estandar = sd,
minimo = min,
maximo = max
)
) %>%
select(-contains("mun_")) %>%
pivot_longer(cols = 1:40,
names_to = "Variable",
values_to = "Valor")
stargazer(modelos1, type = "text", title = "Resultados de las regresiones bivariadas",
model.names = FALSE, column.labels = c("college", "female", "ofjobs", "yearsexp", "honors"),
omit.stat = "f", single.row = TRUE)
modelos2 <- list(
PB6 <- lm(volunteer ~ black_sounding, data = EPT),
PB7 <- lm(military ~ black_sounding, data = EPT),
PB8 <- lm(empholes ~ black_sounding, data = EPT),
PB9 <- lm(workinschool ~ black_sounding, data = EPT),
PB10 <- lm(email ~ black_sounding, data = EPT)
)
source("C:/Users/darth/OneDrive - CIDE/Cuarto Semestre-DESKTOP-FJT75QH/Evaluación/cuca/Evaluación2.R", echo=TRUE)
source("C:/Users/darth/OneDrive - CIDE/Cuarto Semestre-DESKTOP-FJT75QH/Evaluación/cuca/Evaluación2.R", echo=TRUE)
install.packages("psych")
EPT <- read_dta("./Efecto promedio del tratamiento.dta")
library(haven)
EPT <- read_dta("./Efecto promedio del tratamiento.dta")
View(EPT)
EPT$ofjobs.tratamiento <- ifelse(EPT$black_sounding==1, EPT$ofjobs, NA)
EPT$ofjobs.control <- ifelse(EPT$black_sounding==0, EPT$ofjobs, NA)
EPT$yearsexp.tratamiento <- ifelse(EPT$black_sounding==1, EPT$yearsexp, NA)
EPT$yearsexp.control <- ifelse(EPT$black_sounding==0, EPT$yearsexp, NA)
EPT$fracblack.tratamiento <- ifelse(EPT$black_sounding==1, EPT$fracblack, NA)
EPT$fracblack.control <- ifelse(EPT$black_sounding==0, EPT$fracblack, NA)
#1. Pruebas balanceadas con pruebas t
t.test(EPT$ofjobs ~ EPT$black_sounding, var.equal=TRUE)
t.test(EPT$yearsexp ~ EPT$black_sounding, var.equal=TRUE)
t.test(EPT$fracblack ~ EPT$black_sounding, var.equal=TRUE)
#2.  Pruebas balanceadas con regresiones Vibariadas#
PB1 <- lm(college ~ black_sounding, data = EPT)
PB2 <- lm(female ~ black_sounding, data = EPT)
PB3 <- lm(ofjobs ~ black_sounding, data = EPT)
PB4 <- lm(yearsexp ~ black_sounding, data = EPT)
PB5 <- lm(honors ~ black_sounding, data = EPT)
PB6 <- lm(volunteer ~ black_sounding, data = EPT)
PB7 <- lm(military ~ black_sounding, data = EPT)
PB8 <- lm(empholes ~ black_sounding, data = EPT)
PB9 <- lm(workinschool ~ black_sounding, data = EPT)
PB10 <- lm(email ~ black_sounding, data = EPT)
PB11 <- lm(computerskills ~ black_sounding, data = EPT)
PB12 <- lm(specialskills ~ black_sounding, data = EPT)
PB13 <- lm(h ~ black_sounding, data = EPT)
PB14 <- lm(chicago ~ black_sounding, data = EPT)
PB15 <- lm(fracwhite ~ black_sounding, data = EPT)
PB16 <- lm(fracblack ~ black_sounding, data = EPT)
PB17 <- lm(lmedhhinc ~ black_sounding, data = EPT)
PB18 <- lm(fracdropout ~ black_sounding, data = EPT)
PB19 <- lm(fraccolp ~ black_sounding, data = EPT)
PB20 <- lm(linc ~ black_sounding, data = EPT)
install.packages("stargazer")
library(stargazer)
modelos1 <- list(
PB1 <- lm(college ~ black_sounding, data = EPT),
PB2 <- lm(female ~ black_sounding, data = EPT),
PB3 <- lm(ofjobs ~ black_sounding, data = EPT),
PB4 <- lm(yearsexp ~ black_sounding, data = EPT),
PB5 <- lm(honors ~ black_sounding, data = EPT)
)
stargazer(modelos1, type = "text", title = "Resultados de las regresiones bivariadas",
model.names = FALSE, column.labels = c("college", "female", "ofjobs", "yearsexp", "honors"),
omit.stat = "f", single.row = TRUE)
modelos2 <- list(
PB6 <- lm(volunteer ~ black_sounding, data = EPT),
PB7 <- lm(military ~ black_sounding, data = EPT),
PB8 <- lm(empholes ~ black_sounding, data = EPT),
PB9 <- lm(workinschool ~ black_sounding, data = EPT),
PB10 <- lm(email ~ black_sounding, data = EPT)
)
stargazer(modelos2, type = "text", title = "Resultados de las regresiones bivariadas",
model.names = FALSE, column.labels = c("volunteer", "military", "empholes", "workinschool", "email"),
omit.stat = "f", single.row = TRUE)
modelos3 <- list(
PB11 <- lm(computerskills ~ black_sounding, data = EPT),
PB12 <- lm(specialskills ~ black_sounding, data = EPT),
PB13 <- lm(h ~ black_sounding, data = EPT),
PB14 <- lm(chicago ~ black_sounding, data = EPT),
PB15 <- lm(fracwhite ~ black_sounding, data = EPT)
)
stargazer(modelos3, type = "text", title = "Resultados de las regresiones bivariadas",
model.names = FALSE, column.labels = c("computerskills", "specialskills", "h", "chicago", "fracwhite"),
omit.stat = "f", single.row = TRUE)
modelos4 <- list(
PB16 <- lm(fracblack ~ black_sounding, data = EPT),
PB17 <- lm(lmedhhinc ~ black_sounding, data = EPT),
PB18 <- lm(fracdropout ~ black_sounding, data = EPT),
PB19 <- lm(fraccolp ~ black_sounding, data = EPT),
PB20 <- lm(linc ~ black_sounding, data = EPT)
)
stargazer(modelos4, type = "text", title = "Resultados de las regresiones bivariadas",
model.names = FALSE, column.labels = c("fracblack", "lmedhhinc", "fracdropout", "fraccolp", "linc"),
omit.stat = "f", single.row = TRUE)
#4. Porcentajes y diferencias en puntos porcentuales
# porcentaje de los CV con nombre blanco y negro que recibieron una llamada para entrevista
tabla <- table(EPT$black_sounding, EPT$call)
rownames(tabla) <- c("Whitesounding", "Blacksounding")
colnames(tabla) <- c("No recibieron llamada", "Sí recibieron llamada")
addmargins(tabla)
# porcentaje de los CV con nombre blanco que recibieron una llamada para entrevista
percentagewhitesounding_call <- (sum(EPT$black_sounding == 0 & EPT$call == 1) / sum(EPT$black_sounding == 0)) * 100
percentagewhitesounding_call
# porcentaje de los CV con nombre negro recibieron una llamada para entrevista
percentageblacksounding_call <- (sum(EPT$black_sounding == 1 & EPT$call == 1) / sum(EPT$black_sounding == 1)) * 100
percentageblacksounding_call
#Diferencia en puntos porcentuales
diferencia_en_pp <- percentagewhitesounding_call - percentageblacksounding_call
cat("La diferencia en puntos porcentuales es:", diferencia_en_pp, "\n")
#5. Regresión Vibariada - Impacto
ImpactoSimple <- lm(call ~ black_sounding, data = EPT)
summary(ImpactoSimple)
#7. Regresión Multivariada - Impacto
ImpactoMultivariado <- lm(call ~ black_sounding + college + female + ofjobs + yearsexp + honors + volunteer + military + empholes + workinschool+
email + computerskills + specialskills + h + chicago + fracwhite + fracblack + lmedhhinc + fracdropout +
fraccolp + linc, data = EPT)
summary(ImpactoMultivariado)
t.test(EPT$ofjobs ~ EPT$black_sounding, var.equal=TRUE)
t.test(EPT$yearsexp ~ EPT$black_sounding, var.equal=TRUE)
t.test(EPT$fracblack ~ EPT$black_sounding, var.equal=TRUE)
knit_with_parameters("C:/Users/darth/OneDrive - CIDE/Cuarto Semestre-DESKTOP-FJT75QH/Evaluación/cuca/Tarea 3 - Cuca.Rmd")
stargazer(modelos1, type = "text", title = "Resultados de las regresiones bivariadas",
model.names = FALSE, column.labels = c("college", "female", "ofjobs", "yearsexp", "honors"),
omit.stat = "f", single.row = TRUE, align = TRUE)
library(haven)
library(readxl)
library(tidyverse)
library(dplyr)
library(lmtest)
library(sandwich)
library(ggplot2)
library(stargazer)
library(broom)
library(tidyr)
library(kableExtra)
library(patchwork)
library(psych)
stargazer(modelos1, type = "text", title = "Resultados de las regresiones bivariadas",
model.names = FALSE, column.labels = c("college", "female", "ofjobs", "yearsexp", "honors"),
omit.stat = "f", single.row = TRUE, align = TRUE)
stargazer(modelos1, type = "text", title = "Resultados de las regresiones bivariadas",
model.names = FALSE),
stargazer(modelos1, type = "text", title = "Resultados de las regresiones bivariadas",
model.names = FALSE,
omit.stat = "f", single.row = TRUE, align = TRUE)
stargazer(modelos1, type = "text", title = "Resultados de las regresiones bivariadas",
model.names = FALSE,
omit.stat = "f", single.row = TRUE)
stargazer(modelos1, type = "text", title = "Resultados de las regresiones bivariadas",
model.names = FALSE,
omit.stat = "f")
stargazer(modelos2, type = "text", title = "Resultados de las regresiones bivariadas",
model.names = FALSE,
omit.stat = "f")
